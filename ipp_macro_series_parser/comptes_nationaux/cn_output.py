# -*- coding: utf-8 -*-
"""
Created on Thu Jul 16 14:13:25 2015

@author: Antoine
"""

import pandas


def tidy(df):
    """
    Unmelts the data, using the years as variables (columns).

    Parameters
    ----------
    df : DataFrame
        DataFrame generated by cn_df_generator(year)

    Example
    --------
    >>> table2013 = cn_df_generator(2013)
    >>> my_list_2 = [{'code': None, 'institution': 'S1', 'ressources': False,
    ...             'description': 'PIB'},
    ...             {'code': None, 'institution': 'S1', 'ressources': False,
    ...             'description': 'PIN'}]
    >>> df2 = look_many(table2013, my_list_2)
    >>> df2_tidy = tidy(df2)

    Returns a slice of cn_df_generator(2013) containing the gross product (PIB) and the net product (PIN) of the whole
    economy (S1), for all years. Observations are indexed by code (PIB, PIN) and values are given per year.
    """
    del df['file_name']
    del df['link']
    del df['source']
    del df['version']
    del df['description']

    df = df.set_index(['code', 'ressources', 'institution', 'file_title', 'year'])
    df = df.unstack(level = 'year')

    levels = df.columns.levels
    labels = df.columns.labels
    df.columns = levels[1][labels[1]]

    return df


def df_to_xls(df, output_path):
    """
    Save the data fron a DataFrame to an excel file.

    Parameters
    ----------
    df : DataFrame
        DataFrame generated by cn_df_generator(year)
    output_path : path
        Path of the excel file

    Example
    --------
    >>> table2013 = cn_df_generator(2013)
    >>> my_list_2 = [{'code': None, 'institution': 'S1', 'ressources': False,
    ...             'description': 'PIB'},
    ...             {'code': None, 'institution': 'S1', 'ressources': False,
    ...             'description': 'PIN'}]
    >>> df2 = look_many(table2013, my_list_2)
    >>> df2_tidy = tidy(df2)
    >>> df_to_xls(df2, my_output.xls)

    Save a a slice of cn_df_generator(2013) containing the gross product (PIB) and the net product (PIN) of the whole
    economy (S1), for all years.
    """
#    df.transpose().reset_index(level=0, drop=False).transpose()
    df = df.reset_index()
    writer = pandas.ExcelWriter(output_path, engine='xlsxwriter')
    df.to_excel(writer, sheet_name='Sheet1', header = True, index = False)
    writer.save()


def extractor(df, entry_by_index_list, output_path):
    df = look_many(df, entry_by_index_list)
    df = tidy(df)
    df_to_xls(df, output_path)


def excel_table_generator(folder_year, entry_by_index_list, output_path):  # to add: argument list_years
    """
    Save the dataframe into an excel file with appropriate formating.

    Parameters
    ----------
    year : int
        year of INSEE data realease
    entry_by_index_list : list of dictionaries
        Dictionnaries should have keys 'code', 'institution', 'ressources', 'year', 'description', but not necesarily
        all of them.
    output_path : path
        Path to the excel file.

    Example
    --------
    >>> excel_table_generator(year, entry_by_index_list, output_path)
    >>> os.system('start excel.exe {}'.format(output_path))
    >>> table2013 = cn_df_generator(2013)
    >>> dico = {'code': 'B1g/PIB', 'institution': 'S1', 'ressources': False, 'year': None, 'description': 'PIB'}
    >>> df0 = look_up(table2013, dico)


    Returns a slice of cn_df_generator(2013) containing only the gross product (PIB) of the whole economy (S1),
    for all years.
    """
    df = cn_df_generator(folder_year)
    extractor(df, entry_by_index_list, output_path)
